menu "XCC options"

choice
	prompt "Tools version"
	default XCC_TOOLS_VER_2017_7

config XCC_TOOLS_VER_2017_6
	bool "RG-2017.6"

config XCC_TOOLS_VER_2017_7
	bool "RG-2017.7"

config XCC_TOOLS_VER_RI_2018_0
	bool "RI-2018.0"

endchoice




menu "Optimizations"

choice
	prompt "Optimization Level"
	default GCC_OPTIMIZE_NONE

config XCC_OPTIMIZE_NONE
	bool "-O0 : No Optimizations"

config XCC_OPTIMISE_WITH_DEBUG
	bool "-Og : Optimizations with debugging support"

config XCC_OPTIMIZE_SIZE
    bool "-Os : Optimize for size "

config XCC_OPTIMIZE_SPEED_SLIGHTLY
	bool "-O1 : Optimize for speed slightly "

config XCC_OPTIMIZE_SPEED
	bool "-O2 : Optimize for speed "

config XCC_OPTIMIZE_ULTRA_SPEED
	bool "-O3 : Optimize for ultra-speed but can increase code-size "

endchoice

config XCC_OPT_KEEP_INTERMEDIATE
	bool "Keep intermediate files generated by the compiler"
	default n
	---help---
		[-save-temps] Saves intermediate files generated by the compiler;
		by default, they are discarded.
		
config XCC_OPT_INTER_PROCEDURAL_ANALYSIS
	bool "Perform inter-procedural analysis"
	default n
	---help---
		[-ipa] Perform inter-procedural analysis and optimization.
		If any file is compiled with IPA (-c -ipa), the .o files will be
		linked with the -ipa option and will be linked with xt-xc++
		for building the executable.

config XCC_OPT_USE_DSP_COPROCESSOR
	bool "Use DSP co-processor"
	default n
	---help---
		[-mcoproc] Allow use of coprocessor register files. Higher
		performance but perhaps not safe when compiling interrupt handlers.

config XCC_OPT_DONT_GENERATE_MEMW_INSTRUCTIONS
	bool "Do not serialize volatile memory access"
	default n
	---help---
		[-mno-serialize-volatile] Do not generate MEMW instructions
		in between volatile memory references.

config XCC_OPT_PUT_LITERALS_IN_TEXT_SECTION
	bool "Put literals in text section"
	default n
	---help---
		[-mtext-section-literals] Generates literals interspersed in the text
		section in order to keep them as close as possible to their references.

#config XCC_OPT_GENERATE_A_DYNAMIC_CALL_GRAPH
#	bool "Enable a dynamic callgraph data collection"
#	default n
#	---help---
#		Compiling with this option instruments every call to generate a dynamic
#		call graph allowing the profiler to estimate hierarchical
#		profiles but also perturbing the executable.

config XCC_OPT_FEEDBACK_INFO_TO_REORDER_FUNCTIONS
	bool "Uses feedback info to reorder functions"
	default n
	---help---
		[-fb_reorder] Uses feedback info to reorder
		functions for better cache utilization.

config XCC_OPT_OPTIMIZES_FOR_SPACE
	bool "Optimizes for space"
	default n
	---help---
		[-Os] Optimizes for space. This option can be used in conjunction with
		any optimization level, but the optimizations are guided
		by the goal of minimizing the code size.

config XCC_OPT_ENABLE_OPTIMIZATION_ALIAS_RESTRICT
	bool "Enable optimization alias restrict"
	default n
	---help---
		[-OPT:alias=restrict] The compiler assumes that memory references with
		one level of indirection through different named pointers do not alias
		with each other, nor with any direct memory references.

config XCC_OPT_ENABLE_AUTOMATIC_VECTORIZATION
	bool "Enable automatic vectorization"
	default n
	---help---
		[-LNO:simd] Enables vectorization. This option is only valid in
		conjunction with the -O3 option.
		Choosing this option also adds "-LNO:simd_v" to compile line.

config XCC_OPT_SPECULATIVELY_VECTORIZING_LOOPS_WITH_IFS
	bool "Speculatively vectorizing loops with ifs"
	default n
	---help---
		[-LNO:simd_agg_if_conv] Vectorizes a loop containing an IF statement
		even if vectorizing the statement might cause the system to load
		a value that otherwise would not have been loaded.

config XCC_OPT_ASSUME_PARAMETERS_ARE_ALIGNED
	bool "Assume parameters are aligned"
	default n
	---help---
		[-LNO:aligned_formal_pointers=on] Treats all pointers passed as formal
		parameters to functions as if they are aligned
		correctly for use in the vectorizer.

config XCC_OPT_OPTIMIZE_FOR_CONNECTION_BOX
	bool "Optimize for connection box"
	default n
	---help---
		[-mcbox] Compile code for processors with 2 load/stores to avoid
		issuing 2 loads to the same memory in the same cycle.
		Often used in conjunction with memory placement pragmas to inform the
		compiler of the memory accessed by a given pointer in a program.

config XCC_OPT_PRODUCE_W2C_FILE
	bool "Produce w2c file"
	default n
	---help---
		[-clist] Produces a .w2c.c file that contains a C-level view of code
		transformations performed by XCC.
		This option is not applicable to C++ input files.

config XCC_OPT_ENABLE_LONG_CALLS
	bool "Enable long calls"
	default n
	---help---
		[-mlongcalls] Enables transformation of direct calls into indirect
		calls to allow calls across a greater address range.

config XCC_OPT_CREATE_SEPARATE_FUNCTION_SECTIONS
	bool "Create separate function sections"
	default y
	---help---
		[-ffunction-sections] Creates a separate section for each function to
		improve cache performance.
		See Update Link Order on the Project context menu.

endmenu #Optimization manu

endmenu
